options {
  parserPackage="JetBrains.ReSharper.Plugins.FSharp.Psi.Gen";
  parserClassName="FSharpParserGenerated";
  psiInterfacePackageName="JetBrains.ReSharper.Plugins.FSharp.Psi.Tree";
  psiStubsPackageName="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree";
  psiStubsBaseClass="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree.FSharpCompositeElement";
  tokenClassName="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree.FSharpToken";
  tokenTypePackageName="JetBrains.ReSharper.Plugins.FSharp.Psi.Parsing";
  tokenTypeClassName="FSharpTokenType";
  parserTargetSubdir="Parsing/FSharp";
  psiInterfacesTargetSubdir="Psi/FSharp";
  psiStubsTargetSubdir="Psi/FSharp/Impl";
  elementTypePrefix="";
  visitorClassName="TreeNodeVisitor";
  visitorMethodSuffix="";
  disableReflection;
  separateHierarchies;
  acceptModifier="";
  visitorSuperClassName="JetBrains.ReSharper.Plugins.FSharp.Psi.TreeNodeVisitorBase";
  "treeElementClassFQName"="JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement";
  "leafElementClassFQName"="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree.FSharpLeafElement";
  "compositeElementClassFQName"="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree.FSharpCompositeElement";
  "psiElementVisitorClassFQName"="JetBrains.ReSharper.Plugins.FSharp.Psi.Tree.TreeNodeVisitor";
  "unexpectedTokenClassFQName"="Parsing.UnexpectedToken";
  "syntaxErrorClassFQName"="Parsing.SyntaxError";
  "parserGenRuntimePackageName"="Parsing";
  "createTokenElementMethodFQName"="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Factory.createTokenElement";
  "visitMethodPrefix"="Visit";
  "lexerClassName"="JetBrains.ReSharper.Plugins.FSharp.Psi.Parsing.FSharpLexer";
  "psiClassesPrefix"="";
  "psiElementClassFQName"="JetBrains.ReSharper.Plugins.FSharp.Psi.Tree.IFSharpTreeNode";
  customImplPackage="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree";
  customInterfacePackage="JetBrains.ReSharper.Plugins.FSharp.Psi.Tree";
  "interfaceNamePrefix"="I";
  "tokenElementClassFQName"="JetBrains.ReSharper.Psi.Tree.ITokenNode";
  "customImplSuffix"="";
  "objectClassFQName"="System.Object";
  publicChildRolePrefix="FS_";
  tokenBitsetThreshold=4;
  elementTypeBaseClass="JetBrains.ReSharper.Plugins.FSharp.Psi.Tree.FSharpCompositeNodeType";
  parserMessagesClass="JetBrains.ReSharper.Plugins.FSharp.Psi.Parsing.ParserMessages";
  generateWorkingPsi;
}



// Files

interface fSharpFile options { customParseFunction; noInternalParseFunction; }:
  fSharpImplFile |
  fSharpSigFile;

fSharpImplFile options { stubBase="FSharpFileBase"; }:
  topLevelModuleLikeDeclaration<MODULE_OR_NAMESPACE_DECLARATION, Declarations>*;

fSharpSigFile options { stubBase="FSharpFileBase"; }:
  topLevelModuleLikeDeclaration<MODULE_OR_NAMESPACE_DECLARATION, Declarations>*;



// Modules and namespaces

interface fSharpDeclaration:
  moduleLikeDeclaration |
  moduleMemberDeclaration |
  fSharpTypeDeclaration;

interface moduleLikeDeclaration:
  topLevelModuleLikeDeclaration |
  nestedModuleDeclaration;

interface topLevelModuleLikeDeclaration:
  namedModuleLikeDeclaration |
  anonModuleDeclaration |
  globalNamespaceDeclaration;

interface namedModuleLikeDeclaration:
  namedModuleDeclaration |
  namedNamespaceDeclaration;

interface moduleDeclaration:
  namedModuleDeclaration |
  nestedModuleDeclaration;


namedNamespaceDeclaration options { stubBase="FSharpDeclarationBase"; }:
  NAMESPACE<NAMESPACE, NamespaceToken>
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  moduleMember<MODULE_MEMBER, Members>*;

globalNamespaceDeclaration options { stubBase="FSharpDeclarationBase"; }:
  NAMESPACE<NAMESPACE, NamespaceToken>
  GLOBAL
  moduleMember<MODULE_MEMBER, Members>*;

namedModuleDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  MODULE<MODULE, ModuleToken>
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  moduleMember<MODULE_MEMBER, Members>*;

anonModuleDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; }:
  moduleMember<MODULE_MEMBER, Members>*;



// Module members

interface moduleMember:
  moduleMemberDeclaration |
  moduleMemberStatement |
  memberDeclaration |
  hashDirective |
  otherModuleMember;

interface moduleMemberDeclaration:
  nestedModuleDeclaration |
  fSharpTypeDeclaration |
  letModuleDecl |
  moduleAbbreviation |
  otherMemberDeclaration;

interface moduleMemberStatement:
  openStatement |
  do;

letModuleDecl options { stubBase="DummyDeclaration"; }:
  letOrUse{LET, LetOrUseToken}
  REC<REC, RecKeyword>?
  binding<BINDING, Bindings>
  (
    AND
    binding<BINDING, Bindings>
  )*;


interface let:
  letBindings |
  letOrUseBangExpr;

interface letBindings:
  letModuleDecl |
  letOrUseExpr;

interface binding:
  topBinding |
  localBinding;

topBinding
  extras {
    get { methodName="Expression" path=<topBinding:CHAMELEON_EXPR/chameleonExpression:EXPR> };
  }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  MUTABLE<MUTABLE, MutableKeyword>
  synPat<HEAD_PATTERN, HeadPattern>
  returnTypeInfo<RETURN_INFO, ReturnTypeInfo>
  EQUALS
  chameleonExpression<CHAMELEON_EXPR, ChameleonExpression>;

localBinding
  extras {
    get { methodName="Expression" path=<localBinding:CHAMELEON_EXPR/chameleonExpression:EXPR> };
  }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  MUTABLE<MUTABLE, MutableKeyword>
  synPat<HEAD_PATTERN, HeadPattern>
  returnTypeInfo<RETURN_INFO, ReturnTypeInfo>
  EQUALS
  chameleonExpression<CHAMELEON_EXPR, ChameleonExpression>;

returnTypeInfo:
  COLON
  fSharpAttribute<ATTRIBUTE, Attributes>*
  synType<TYPE, ReturnType>;

interface synPat:
  namedPat |
  typedPat |
  attribPat |
  orPat |
  andsPat |
  longIdentPat | // Used for functions, union cases and active patterns with parameters.
  tuplePat |
  arrayOrListPat |
  parenPat |
  recordPat |
  optionalValPat |
  isInstPat |
  consPat |
  wildPat |
  constPat |
  otherPat;

interface namedPat:
  topNamedPat |
  localNamedPat;

interface longIdentPat:
  topLongIdentPat |
  localLongIdentPat;

interface arrayOrListPat:
  arrayPat |
  listPat;

topNamedPat options { stubBase="TopPatternDeclarationBase"; }:
  synPat<PATTERN, Pattern>?
  identOrOpName{IDENTIFIER, Identifier};

topLongIdentPat options { stubBase="TopPatternDeclarationBase"; }:
  identOrOpName{IDENTIFIER, Identifier}
  synPat<PARAMETER, Parameters>*;

localNamedPat options { stubBase="LocalPatternDeclarationBase"; }:
  synPat<PATTERN, Pattern>?
  identOrOpName{IDENTIFIER, Identifier};

localLongIdentPat options { stubBase="LocalPatternDeclarationBase"; }:
  identOrOpName{IDENTIFIER, Identifier}
  synPat<PARAMETER, Parameters>*;

typedPat options { stubBase="SynPatternBase"; }:
  synPat<PATTERN, Pattern>
  COLON
  synType;

attribPat options { stubBase="SynPatternBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  synPat<PATTERN, Pattern>;

orPat options { stubBase="SynPatternBase"; }:
  synPat<PATTERN1, Pattern1>
  BAR
  synPat<PATTERN2, Pattern2>;

andsPat options { stubBase="SynPatternBase"; }:
  synPat<PATTERN1, Pattern1>
  AMP
  synPat<PATTERN2, Pattern2>;

arrayPat options { stubBase="SynPatternBase"; }:
  LBRACK_BAR
  synPat<ATTRIBUTE, Patterns>*
  LBRACK_BAR;

listPat options { stubBase="SynPatternBase"; }:
  LBRACK
  synPat<ATTRIBUTE, Patterns>*
  RBRACK;

tuplePat options { stubBase="SynPatternBase"; }:
  synPat<ATTRIBUTE, Patterns>
  (
    COMMA
    synPat<ATTRIBUTE, Patterns>
  )*;

parenPat options { stubBase="SynPatternBase"; }:
  LPAREN
  synPat<PATTERN, Pattern>
  RPAREN;

recordPat options { stubBase="SynPatternBase"; }:
  LBRACE
  synPat<ATTRIBUTE, Patterns>*
  fakeSeparator
  RBRACE;

optionalValPat options { stubBase="SynPatternBase"; }:
  QMARK
  synPat<PATTERN, Pattern>;

isInstPat options { stubBase="SynPatternBase"; }:
  COLON_QMARK
  synType<SYN_TYPE, Type>;

consPat options { stubBase="SynPatternBase"; }:
  synPat<PATTERN1, Pattern1>
  COLON_COLON
  synPat<PATTERN2, Pattern2>;

wildPat options { stubBase="SynPatternBase"; }:
  UNDERSCORE;

constPat options { stubBase="SynPatternBase"; }:
  (
    TRUE |
    FALSE |
    STRING // todo: add more
  );
  

otherPat options { stubBase="SynPatternBase"; }:
  fakeSeparator;


interface synExpr:
  parenExpr |
  quoteExpr |
  constExpr |
  typedExpr |
  tupleExpr |
  anonRecdExpr |
  arrayOrListExpr |
  recordExpr |
  newExpr |
  objExpr |
  whileExpr |
  forExpr |
  forEachExpr |
  arrayOrListOfSeqExpr |
  compExpr |
  lambdaExpr |
  matchLambdaExpr |
  matchExpr |
  doExpr |
  assertExpr |
  appExpr |
  typeAppExpr |
  letOrUseExpr |
  tryWithExpr |
  tryFinallyExpr |
  lazyExpr |
  sequentialExpr |
  ifThenElseExpr |
  identExpr |
  longIdentExpr |
  dotGetExpr |
  dotIndexedGetExpr |
  setExpr |
  typeTestExpr |
  castExpr |
  inferredCastExpr |
  nullExpr |
  addressOfExpr |
  traitCallExpr |
  joinInExpr |
  implicitZeroExpr |
  yieldOrReturnExpr |
  letOrUseBangExpr |

  // todo: cover cases
  libraryOnlyExpr |
  fromErrorExpr |

  fixedExpr;

// interface appExpr:
//   prefixAppExpr |
//   infixAppExpr;

interface setExpr:
  longIdentSetExpr |
  dotSetExpr |
  exprSetExpr |
  dotIndexedSetExpr |
  namedIndexedPropertySet |
  dotNamedIndexedPropertySet;

interface castExpr:
  upcastExpr |
  downcastExpr;

parenExpr options { stubBase="DummyExpression"; }:
  LPAREN<LPAREN, LeftParen>
  synExpr<EXPR, InnerExpression>?
  RPAREN<RPAREN, RightParen>;

quoteExpr options { stubBase="DummyExpression"; }:
  (
    LQUOTE_TYPED
    synExpr<EXPR, QuotedExpression>?
    RQUOTE_TYPED?
  ) |
  (
    LQUOTE_UNTYPED
    synExpr<EXPR, QuotedExpression>?
    RQUOTE_UNTYPED?
  );

constExpr options { stubBase="DummyExpression"; }:
  fakeSeparator;

typedExpr options { stubBase="DummyExpression"; }:
  synExpr<EXPR, Expression>
  COLON
  synType<TYPE, Type>;

tupleExpr options { stubBase="DummyExpression"; }:
  STRUCT<STRUCT, StructKeyword>?
  fakeSeparator;

anonRecdExpr options { stubBase="DummyExpression"; }:
  STRUCT<STRUCT, STRUCT_KEYWORD>?
  LBRACE_BAR
  (
    synExpr<COPY_INFO, CopyInfoExpression>
    WITH
  )?
  recordExprBinding<BINDING, ExprBindings>* // todo: FCS has different type here
  BAR_RBRACE;

arrayOrListExpr options { stubBase="DummyExpression"; }:
  fakeSeparator;

recordExpr options { stubBase="ReferenceExpressionBase"; }:
  LBRACE
  (
    synExpr<COPY_INFO, CopyInfoExpression>
    WITH
  )?
  recordExprBinding<BINDING, ExprBindings>*
  RBRACE;

recordExprBinding:
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  EQUALS
  synExpr<EXPR, Expression>
  SEMICOLON?;

newExpr options { stubBase="TypeExpressionBase"; }:
  namedTypeExpression<TYPE, Type>
  fakeSeparator;

forExpr options { stubBase="DummyExpression"; }:
  FOR
  IDENTIFIER<IDENTIFIER, Identifier>
  synExpr<IDENT_EXPR, IdentExpression>
  TO
  synExpr<TO_EXPR, ToExpression>
  DO
  synExpr<DO_EXPR, DoExpression>;

forEachExpr options { stubBase="DummyExpression"; }:
  FOR
  synPat<PAT, Pattern>
  IN
  synExpr<TO_EXPR, ToExpression>
  DO
  synExpr<DO_EXPR, DoExpression>;

arrayOrListOfSeqExpr options { stubBase="DummyExpression"; }:
  (LBRACK
   synExpr<EXPR, Expression>
   RBRACK) |

   (LBRACK_BAR
    synExpr<EXPR, Expression>
    BAR_RBRACK);

whileExpr options { stubBase="DummyExpression"; }:
  WHILE
  synExpr<WHILE_EXPR, WhileExpression>
  DO
  synExpr<DO_EXPR, DoExpression>;

objExpr options { stubBase="BaseTypeExpressionBase"; }:
  namedTypeExpression<BASE_TYPE, BaseType>
  fakeSeparator;

objExprSecondaryInterface options { stubBase="BaseTypeExpressionBase"; }:
  namedTypeExpression<BASE_TYPE, BaseType>
  fakeSeparator;

compExpr options { stubBase="DummyExpression"; }:
  LBRACE
  synExpr<EXPR, Expression>
  RBRACE;

lambdaExpr options { stubBase="DummyExpression"; }:
  FUN
  synPat<PAT, Patterns>*
  RARROW
  synExpr<EXPR, Expression>;

matchLambdaExpr options { stubBase="DummyExpression"; }:
  FUNCTION
  matchClause<MATCH_CLAUSE, clauses>*;

// todo: separate nodes for bang exprs?
matchExpr options { stubBase="DummyExpression"; }:
  MATCH
  synExpr<EXPR, Expression>
  WITH
  matchClause<MATCH_CLAUSE, clauses>*;

doExpr options { stubBase="DummyExpression"; }:
  DO
  synExpr<EXPR, Expression>;

assertExpr options { stubBase="DummyExpression"; }:
  ASSERT
  synExpr<EXPR, Expression>;

// todo: infix app
appExpr options { stubBase="DummyExpression"; }:
  fakeSeparator
  synExpr<FUNC_EXPR, FunctionExpression>
  synExpr<ARG_EXPR, ArgumentExpression>;

typeAppExpr options { stubBase="DummyExpression"; }:
  synExpr<EXPR, Expression>
  LESS
  synType<TYPE_ARG, TypeArgs>
  (
    COMMA
    synType<TYPE_ARG, TypeArgs>
  )*
  GREATER;

letOrUseExpr options { stubBase="DummyExpression"; }:
  letOrUse{LET, LetOrUseToken}
  REC<REC, RecKeyword>?
  binding<BINDING, Bindings>
  (
    AND
    binding<BINDING, Bindings>
  )*;

tryWithExpr options { stubBase="DummyExpression"; }:
  TRY
  synExpr<TRY_EXPR, TryExpression>
  WITH
  matchClause<CLAUSE, WithCases>*;

tryFinallyExpr options { stubBase="DummyExpression"; }:
  TRY
  synExpr<TRY_EXPR, TryExpression>
  FINALLY
  synExpr<FINALLY_EXPR, FinallyExpression>;

longIdentSetExpr options { stubBase="SetExpressionBase"; }:
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  LARROW<LARROW, LArrow>
  synExpr<EXPR, Expression>;

dotGetExpr options { stubBase="SetExpressionBase"; }:
  synExpr<EXPR, Expression>
  DOT
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>;

dotIndexedGetExpr options { stubBase="SetExpressionBase"; }:
  synExpr<EXPR, LeftExpr>
  DOT
  indexerArg<ARG, IndexerArg>;

indexerArg:
  LBRACK
  synExpr<EXPRS, Expressions>
  (
    DOT_DOT
    synExpr<EXPRS, Expressions>
  )?
  RBRACK;

dotSetExpr options { stubBase="SetExpressionBase"; }:
  synExpr<EXPR1, LeftExpr>
  DOT
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  LARROW<LARROW, LArrow>
  synExpr<EXPR2, RightExpr>;

exprSetExpr options { stubBase="SetExpressionBase"; }:
  synExpr<EXPR1, LeftExpr>
  LARROW<LARROW, LArrow>
  synExpr<EXPR2, RightExpr>;

dotIndexedSetExpr options { stubBase="SetExpressionBase"; }:
  synExpr<EXPR, Expression>
  DOT
  LBRACK
  (
    synExpr<INDEXER_EXPR, IndexerExpressions>
    COMMA
  )*
  RBRACK
  LARROW<LARROW, LArrow>
  synExpr<RHS_EXPR, RightExpression>;

namedIndexedPropertySet options { stubBase="SetExpressionBase"; }:
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  DOT
  synExpr<EXPR1, LeftExpr>
  synExpr<INDEXER_EXPR, IndexerExpressions>
  LARROW<LARROW, LArrow>
  synExpr<EXPR2, RightExpr>;

dotNamedIndexedPropertySet options { stubBase="SetExpressionBase"; }:
  synExpr<EXPR1, LeftExpr>
  DOT
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  synExpr<INDEXER_EXPR, IndexerExpressions>
  LARROW<LARROW, LArrow>
  synExpr<EXPR2, RightExpr>;

lazyExpr options { stubBase="DummyExpression"; }:
  LAZY
  synExpr<EXPR, Expression>;

sequentialExpr options { stubBase="DummyExpression"; }:
  synExpr<EXPR, Expressions>*;

ifThenElseExpr options { stubBase="DummyExpression"; }:
  IF<IF, IfKeyword>
  synExpr<IF_EXPR, IfExpr>
  THEN<THEN, ThenKeyword>
  synExpr<THEN_EXPR, ThenExpr>
  (
    ELSE<ELSE, ElseKeyword>
    synExpr<ELSE_EXPR, ElseExpr>
  )?;

identExpr options { stubBase="TypeExpressionBase"; }:
  identOrOpName{IDENTIFIER, Identifier};

longIdentExpr options { stubBase="TypeExpressionBase"; }:
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>;

matchClause options { stubBase="DummyExpression"; }:
  BAR<BAR, Bar>?
  synPat<PAT, Pattern>
  RARROW<RARROW, RArrow>
  synExpr<EXPR, Expression>;

typeTestExpr options { stubBase="DummyExpression"; }:
  synExpr<EXPR, Expression>
  COLON_QMARK
  synType<TYPE, Type>;

upcastExpr options { stubBase="DummyExpression"; }:
  synExpr<EXPR, Expression>
  COLON_GREATER
  synType<TYPE, Type>;
  
downcastExpr options { stubBase="DummyExpression"; }:
  synExpr<EXPR, Expression>
  COLON_QMARK_GREATER
  synType<TYPE, Type>;

inferredCastExpr options { stubBase="DummyExpression"; }:
  (UPCAST | DOWNCAST)
  synExpr<EXPR, Expression>;

// todo: maybe replace with SynExpr.Const in FCS?
nullExpr options { stubBase="DummyExpression"; }:
  NULL<NULL, NullKeyword>;

addressOfExpr options { stubBase="DummyExpression"; }:
  (AMP | AMP_AMP)
  synExpr<EXPR, Expression>;

traitCallExpr options { stubBase="DummyExpression"; }:
  fakeSeparator;

joinInExpr options { stubBase="DummyExpression"; }:
  fakeSeparator;

implicitZeroExpr options { stubBase="DummyExpression"; }:
  fakeSeparator;

yieldOrReturnExpr options { stubBase="DummyExpression"; }:
  (YIELD | YIELD_BANG | RETURN | RETURN_BANG)
  synExpr<EXPR, Expression>;

letOrUseBangExpr options { stubBase="DummyExpression"; }:
  letOrUseBang{LET, LetOrUseToken}
  synPat<PAT, Pattern>
  synExpr<RHS_EXPR, RightHandExpression>
  IN?
  synExpr<EXPR, Expression>;

libraryOnlyExpr options { stubBase="DummyExpression"; }:
  fakeSeparator;

fromErrorExpr options { stubBase="DummyExpression"; }:
  fakeSeparator;

fixedExpr options { stubBase="DummyExpression"; }:
  FIXED<FIXED, FixedKeyword>
  synExpr<EXPR, Expression>;

chameleonExpression options { stubBase="DummyExpression"; }:
  synExpr<EXPR, Expression>;


interface fSharpTypeDeclaration:
  exceptionDeclaration |
  simpleTypeDeclaration |
  typeExtensionDeclaration |
  delegateDeclaration |
  objectModelTypeDeclaration |
  nestedTypeUnionCaseDeclaration;

interface simpleTypeDeclaration:
  enumDeclaration |
  recordDeclaration |
  unionDeclaration |
  notCompiledTypeDeclaration;

interface notCompiledTypeDeclaration:
  typeAbbreviationDeclaration |
  moduleAbbreviation |
  abstractTypeDeclaration |
  otherSimpleTypeDeclaration;

interface objectModelTypeDeclaration:
  classDeclaration |
  interfaceDeclaration |
  structDeclaration |
  objectTypeDeclaration;

nestedModuleDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  moduleMember<MODULE_MEMBER, Members>*;

typeExtensionDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
   get { methodName="TypeParameters" path=<typeExtensionDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
   get { methodName="TypeMembers" path=<typeExtensionDeclaration:TYPE_MEMBER> };
 }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  longIdentifier<IDENTIFIER, LongIdentifier>
  namedTypeExpression<EXTENDED_TYPE, ExtendedType>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

// Enums

enumDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<enumDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  enumMemberDeclaration<ENUM_MEMBER, EnumMembers>*
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

enumMemberDeclaration options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  IDENTIFIER<IDENTIFIER, Identifier>;



// Records

recordDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<recordDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  recordFieldDeclaration<RECORD_FIELD, Fields>*
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;


recordFieldDeclaration options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  IDENTIFIER<IDENTIFIER, Identifier>;



// Discriminated unions

unionCasesList:
  modifier{ACCESS_MODIFIER, Modifier}?
  unionCaseDeclaration<UNION_CASE, UnionCases>*;

unionDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<unionDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
  get { methodName="UnionCases" path=<unionDeclaration:UNION_CASES_LIST/unionCasesList:UNION_CASE> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  unionCasesList<UNION_CASES_LIST, UnionCasesList>
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;


interface unionCaseDeclaration:
  singletonCaseDeclaration |
  nestedTypeUnionCaseDeclaration;

singletonCaseDeclaration options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>;

nestedTypeUnionCaseDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<nestedTypeUnionCaseDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  caseFieldDeclaration<UNION_FIELD, Fields>*
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;


interface caseFieldDeclaration:
  unionCaseFieldDeclaration |
  exceptionFieldDeclaration;

unionCaseFieldDeclaration options { stubBase="UnionCaseFieldDeclarationBase"; }:
  IDENTIFIER<IDENTIFIER, Identifier>;

exceptionFieldDeclaration options { stubBase="UnionCaseFieldDeclarationBase"; }:
  IDENTIFIER<IDENTIFIER, Identifier>;


// Other members

exceptionDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<exceptionDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  caseFieldDeclaration<UNION_FIELD, Fields>*
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

typeAbbreviationDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<typeAbbreviationDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

moduleAbbreviation options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<moduleAbbreviation:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

interface activePatternCaseDeclaration:
  activePatternNamedCaseDeclaration |
  activePatternWildCase;

interface activePatternNamedCaseDeclaration:
  topActivePatternCaseDeclaration |
  localActivePatternCaseDeclaration;

topActivePatternCaseDeclaration options { stubBase="FSharpDeclarationBase"; }:
   IDENTIFIER<IDENTIFIER, Identifier>;

localActivePatternCaseDeclaration options { stubBase="LocalDeclarationBase"; }:
  IDENTIFIER<IDENTIFIER, Identifier>;

activePatternWildCase:
  wildPat;


otherMemberDeclaration options { stubBase="DummyDeclaration"; }:
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>;

otherSimpleTypeDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<otherSimpleTypeDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

abstractTypeDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<abstractTypeDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;


// Object model type declarations

classDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<classDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

interfaceDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<interfaceDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

structDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<structDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

objectTypeDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<objectTypeDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

delegateDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<delegateDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

interface fSharpTypeMemberDeclaration:
  implicitConstructorDeclaration |
  constructorDeclaration |
  inheritMember |
  interfaceImplementation |
  abstractSlot |
  memberDeclaration |
  typeLetBindings |
  valField |
  autoProperty |
  letModuleDecl |

  otherTypeMember;

interface inheritMember:
  typeInherit |
  interfaceInherit;

interfaceInherit options { stubBase="BaseTypeExpressionBase"; }:
  INHERIT
  namedTypeExpression<BASE_TYPE, BaseType>;

typeInherit options { stubBase="BaseTypeExpressionBase"; }:
  INHERIT
  namedTypeExpression<BASE_TYPE, BaseType>;

interfaceImplementation options { stubBase="BaseTypeExpressionBase"; }:
  namedTypeExpression<INTERFACE_TYPE, InterfaceType>
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>* fakeSeparator;


otherTypeMember: fakeSeparator;
typeLetBindings: fakeSeparator;

implicitConstructorDeclaration options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  memberParam<PARAMETER, Parameters>* fakeSeparator;

constructorDeclaration options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  localDeclaration<PARAMETER, Parameters>* fakeSeparator
  NEW<NEW, NewKeyword>;



// todo: fix properties with explicit setters

memberDeclaration options { stubBase="FSharpProperTypeMemberDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<memberDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfMethodList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  identOrOpName{IDENTIFIER, Identifier}
  typeParameterOfMethodList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  memberParam<PARAMETER, Parameters>* fakeSeparator;

abstractSlot options { stubBase="FSharpProperTypeMemberDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<abstractSlot:TYPE_PARAMETERS_LIST/typeParameterOfMethodList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfMethodList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  memberParam<PARAMETER, Parameters>* fakeSeparator;

valField options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  IDENTIFIER<IDENTIFIER, Identifier>;

autoProperty options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  IDENTIFIER<IDENTIFIER, Identifier>;

memberParam:
  synPat<PATTERN, Pattern>;


// module statements

interface hashDirective:
  lineDirective |
  loadDirective |
  referenceDirective |
  iDirective |
  otherDirective;

lineDirective:
  PP_LINE<PP_LINE, HashToken>
  STRING<STRING, Args>*;

loadDirective:
  PP_LOAD<PP_LOAD, HashToken>
  STRING<STRING, Args>*;

referenceDirective:
  PP_REFERENCE<PP_REFERENCE, HashToken>
  STRING<STRING, Args>*;

iDirective:
  PP_I<PP_I, HashToken>
  STRING<STRING, Args>*;

otherDirective:
  PP_DIRECTIVE<PP_DIRECTIVE, HashToken>
  STRING<STRING, Args>*;

openStatement  options { stubBase="ReferenceExpressionBase"; }:
  OPEN<OPEN, Open>
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>;

do options { stubBase="DummyDeclaration"; }:
  fakeSeparator;

otherModuleMember: fakeSeparator;



// Identifiers

private letOrUse{ROLE, Getter}:
  LET<@ROLE, @Getter> |
  USE<@ROLE, @Getter>;

private letOrUseBang{ROLE, Getter}:
  LET_BANG<@ROLE, @Getter> |
  USE_BANG<@ROLE, @Getter>;

private identOrOpName{ROLE, Getter}:
  IDENTIFIER<@ROLE, @Getter> |
  SYMBOLIC_OP<@ROLE, @Getter> |
  activePatternId<@ROLE, @Getter> | 
  longIdentifier<@ROLE, @Getter>;

activePatternId:
  LPAREN<LPAREN, LParen>
  BAR
  (
    activePatternCaseDeclaration<ACTIVE_PATTERN_CASE, Cases>
    BAR
  )+
  RPAREN<RPAREN, RParen>;

longIdentifier:
  IDENTIFIER
  (
    DOT
    IDENTIFIER<IDENTIFIER, Identifiers>
  )*;



// Type parameters

typeParameterOfTypeList:
  LESS<LESS,LAngle>
  typeParameterOfTypeDeclaration<TYPE_PARAMETER, TypeParameters>*
  GREATER<GREATER,RAngle>;

typeParameterOfMethodList:
  LESS<LESS,LAngle>
  typeParameterOfMethodDeclaration<TYPE_PARAMETER, TypeParameters>*
  GREATER<GREATER,RAngle>;

typeArgumentList:
  LESS<LESS,LAngle>
  GREATER<GREATER,RAngle>;

typeParameterOfTypeDeclaration options { stubBase="FSharpDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  IDENTIFIER<IDENTIFIER, Identifier>;

typeParameterOfMethodDeclaration options { stubBase="FSharpDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  IDENTIFIER<IDENTIFIER, Identifier>;


// Access modifiers

accessModifiers: modifier{ACCESS_MODIFIER, Modifiers}*;

private modifier{ROLE,Getter}:
  PUBLIC<@ROLE,@Getter> |
  PRIVATE<@ROLE,@Getter> |
  INTERNAL<@ROLE,@Getter>;



// Attributes

fSharpAttribute options { stubBase="TypeExpressionBase"; }
  extras {
    get { methodName="Expression" path=<fSharpAttribute:CHAMELEON_EXPR/chameleonExpression:EXPR> };
  }:
  attributeTarget<ATTR_TARGET, Target>?
  longIdentifier<IDENTIFIER, LongIdentifier>
  chameleonExpression<CHAMELEON_EXPR, ArgExpression>?;

attributeTarget:
  IDENTIFIER<IDENTIFIER, Identifier>
  COLON;


fakeSeparator: FAKE;

// Local declarations

localDeclaration options { stubBase="LocalDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  identOrOpName{IDENTIFIER, Identifier};


interface synType:
  varType |
  namedTypeExpression |
  otherType;

varType options { stubBase="TypeExpressionBase"; }:
  QUOTE
  IDENTIFIER<IDENTIFIER, Identifier>;


namedTypeExpression:
  longIdentifier<LONG_IDENTIFIER, LongIdentifier> fakeSeparator
  typeArgumentList?;

otherType:
  fakeSeparator;