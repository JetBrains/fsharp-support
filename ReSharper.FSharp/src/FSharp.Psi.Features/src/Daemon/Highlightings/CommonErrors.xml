<Errors language="F#">

  <Usings>
    JetBrains.ReSharper.Intentions.QuickFixes;
    JetBrains.ReSharper.Plugins.FSharp.Psi.Features.Daemon.Highlightings;
    JetBrains.ReSharper.Plugins.FSharp.Psi.Util.PsiUtil;
    JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree;
    JetBrains.ReSharper.Plugins.FSharp.Psi.Resolve;
    JetBrains.ReSharper.Plugins.FSharp.Psi.Impl;
    JetBrains.ReSharper.Plugins.FSharp.Psi.Tree
  </Usings>

  <StaticSeverityGroups>
    <Group name="F# Errors" key="FSharpErrors"/>
  </StaticSeverityGroups>

  <Warning staticGroup="FSharpErrors" name="UnusedOpen">
    <Parameter type="IOpenStatement" name="openStatement"/>
    <Message value="Open directive is not required by the code and can be safely removed"/>
    <Range>openStatement.GetHighlightingRange()</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="NONE"/>
    <QuickFix>RemoveUnusedOpensFix</QuickFix>
  </Warning>

  <Warning staticGroup="FSharpErrors" name="UseBindingsIllegalInModules">
    <Parameter type="ILetModuleDecl" name="letModuleDecl"/>
    <Message value="'use' bindings are treated as 'let' bindings in modules"/>
    <Range>letModuleDecl.LetOrUseToken.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <QuickFix>ReplaceUseWithLetFix</QuickFix>
  </Warning>

  <Error staticGroup="FSharpErrors" name="UseKeywordIllegalInPrimaryCtor">
    <Parameter type="ILetModuleDecl" name="letModuleDecl"/>
    <Message value="'use' bindings are not permitted in primary constructors"/>
    <Range>letModuleDecl.LetOrUseToken.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <QuickFix>ReplaceUseWithLetFix</QuickFix>
  </Error>

  <Warning staticGroup="FSharpErrors" name="MatchIncomplete">
    <Parameter type="IMatchExpr" name="expr"/>
    <Parameter type="string" name="fcsMessage"/>
    <Message value="{0}">
      <Argument>fcsMessage</Argument>
    </Message>
    <Range>expr.Expression.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <QuickFix>AddMatchAllClauseFix</QuickFix>
  </Warning>

  <Warning staticGroup="FSharpErrors" name="EnumMatchIncomplete">
    <Parameter type="IMatchExpr" name="expr"/>
    <Parameter type="string" name="fcsMessage"/>
    <Message value="{0}">
      <Argument>fcsMessage</Argument>
    </Message>
    <Range>expr.Expression.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <QuickFix>AddMatchAllClauseFix</QuickFix>
  </Warning>
  
  <Warning staticGroup="FSharpErrors" name="RuleNeverMatched">
    <Parameter type="IMatchClause" name="matchClause"/>
    <Message value="This rule will never be matched"/>
    <Range>matchClause.GetHighlightingRange()</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="NONE"/>
    <QuickFix>RemoveNeverMatchingRuleFix</QuickFix>
  </Warning>

  <Warning staticGroup="FSharpErrors" name="UnusedThisVariable">
    <Parameter type="ICtorSelfId" name="selfId"/>
    <Message value="The self reference is unused and adds runtime initialization checks to members in this and derived types"/>
    <Range>selfId.Identifier.GetHighlightingRange()</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="NONE"/>
    <QuickFix>RemoveUnusedSelfIdVariableFix</QuickFix>
  </Warning>

  <Warning staticGroup="FSharpErrors" name="UnusedValue">
    <Parameter type="INamedPat" name="pat"/>
    <Message value="The value '{0}' is unused">
      <Argument>pat.SourceName</Argument>
    </Message>
    <Range>pat.GetNavigationRange()</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="NONE"/>
    <QuickFix>ReplaceWithWildPatFix</QuickFix>
    <QuickFix>AddUnderscorePrefixFix</QuickFix>
    <QuickFix>RemoveUnusedLocalBindingFix</QuickFix>
    <QuickFix>RemoveUnusedNamedAsPatFix</QuickFix>
  </Warning>

  <Warning staticGroup="FSharpErrors" name="UnitTypeExpected">
    <Parameter type="IFSharpExpression" name="expr"/>
    <Parameter type="string" name="fcsMessage"/>
    <Message value="{0}">
      <Argument>fcsMessage</Argument>
    </Message>
    <Range>expr.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <QuickFix>AddIgnoreFix</QuickFix>
    <QuickFix>IntroduceVarFix</QuickFix>
    <QuickFix>RemoveSubsequentFix</QuickFix>
    <QuickFix>ReplaceWithAssignmentExpressionFix</QuickFix>
  </Warning>

  <Warning staticGroup="FSharpErrors" name="FunctionValueUnexpected">
    <Parameter type="IFSharpExpression" name="expr"/>
    <Parameter type="string" name="fcsMessage"/>
    <Message value="{0}">
      <Argument>fcsMessage</Argument>
    </Message>
    <Range>expr.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <QuickFix>AddIgnoreFix</QuickFix>
    <QuickFix>IntroduceVarFix</QuickFix>
    <QuickFix>RemoveSubsequentFix</QuickFix>
  </Warning>
  
  <Error staticGroup="FSharpErrors" name="UnitTypeExpected">
    <Parameter type="IFSharpExpression" name="expr"/>
    <Parameter type="string" name="fcsMessage"/>
    <Message value="{0}">
      <Argument>fcsMessage</Argument>
    </Message>
    <Range>expr.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <QuickFix>AddIgnoreFix</QuickFix>
    <QuickFix>IntroduceVarFix</QuickFix>
  </Error>

  <Warning staticGroup="FSharpErrors" name="TypeTestUnnecessary">
    <Parameter type="IDowncastExpr" name="expr"/>
    <Parameter type="string" name="fcsMessage"/>
    <Message value="{0}">
      <Argument>fcsMessage</Argument>
    </Message>
    <Range>expr.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <QuickFix>ToUpcastFix</QuickFix>
  </Warning>

  <Error staticGroup="FSharpErrors" name="FieldRequiresAssignment">
    <Parameter type="IRecordExpr" name="expr"/>
    <Parameter type="string" name="fcsMessage"/>
    <Message value="{0}">
      <Argument>fcsMessage</Argument>
    </Message>
    <Range>expr.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <QuickFix>GenerateMissingRecordFieldsFix</QuickFix>
  </Error>

  <Error staticGroup="FSharpErrors" name="EmptyRecordInvalid">
    <Parameter type="IRecordExpr" name="expr"/>
    <Parameter type="string" name="fcsMessage"/>
    <Message value="{0}">
      <Argument>fcsMessage</Argument>
    </Message>
    <Range>expr.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <QuickFix>GenerateMissingRecordFieldsFix</QuickFix>
  </Error>

  <Error staticGroup="FSharpErrors" name="LetAndForNonRecBindings">
    <Parameter type="ILetBindings" name="letBindings"/>
    <Range>(letBindings.Separators |> Seq.tryHead |> Option.defaultWith (fun _ -> letBindings.LetOrUseToken)).GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <Message value="The declaration form 'let ... and ...' is only allowed for recursive bindings. Consider using a sequence of 'let' bindings"/>
    <QuickFix>ToRecursiveLetBindingsFix</QuickFix>
  </Error>

  <Error staticGroup="FSharpErrors" name="LocalClassBindingsCannotBeInline">
    <Parameter type="ILetModuleDecl" name="letModuleDecl"/>
    <Range>letModuleDecl.InlineKeyword.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <Message value="Class local bindings cannot be inline"/>
    <QuickFix>RemoveInlineFix</QuickFix>
  </Error>
  
  <Warning staticGroup="FSharpErrors" name="ExtensionMemberInNonExtensionType">
    <Parameter type="IAttribute" name="attr"/>
    <Range>attr.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <Message value="Extension member in non-extension type looks suspicious"/>
  </Warning>

  <Warning staticGroup="FSharpErrors" name="ExtensionTypeWithNoExtensionMembers">
    <Parameter type="IAttribute" name="attr"/>
    <Range>attr.GetHighlightingRange()</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="NONE"/>
    <Message value="Extension type doesn't have any extension members"/>
  </Warning>

  <Warning staticGroup="FSharpErrors" name="ExtensionMemberShouldBeStatic">
    <Parameter type="IAttribute" name="attr"/>
    <Range>attr.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <Message value="Extension member should be static"/>
  </Warning>

  <Warning staticGroup="FSharpErrors" name="RedundantBackticks">
    <Parameter type="FSharpIdentifierToken" name="identifier"/>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE"/>
    <Message value="Redundant identifier quotation"/>
    <QuickFix>RemoveRedundantBackticksFix</QuickFix>
  </Warning>

  <Warning staticGroup="FSharpErrors" name="UpcastUnnecessary">
    <Parameter type="IUpcastExpr" name="upcastExpr"/>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE"/>
    <Range>getUpcastRange upcastExpr</Range>
    <Message value="Upcast is unnecessary"/>
    <QuickFix>RemoveUnnecessaryUpcastFix</QuickFix>
  </Warning>

  <Error staticGroup="FSharpErrors" name="VarBoundTwice">
    <Parameter type="INamedPat" name="pat"/>
    <Message value="'{0}' is bound multiple times">
      <Argument>pat.SourceName</Argument>
    </Message>
    <Range>pat.GetNavigationRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <QuickFix>ReplaceWithWildPatFix</QuickFix>
  </Error>

  <Error staticGroup="FSharpErrors" name="UndefinedName">
    <Parameter type="FSharpSymbolReference" name="reference"/> <!-- todo: change to IReference? -->
    <Parameter type="string" name="fcsMessage"/>
    <Message value="{0}">
      <Argument>fcsMessage</Argument>
    </Message>
    <!--todo: identifier null check-->
    <Range>reference.GetElement().FSharpIdentifier.GetHighlightingRange()</Range>
    <Behavour attributeID="UNRESOLVED_ERROR" overlapResolvePolicy="NONE"/>
    <QuickFix>ToRecursiveFunctionFix</QuickFix>
    <QuickFix arguments="h.Reference">ImportTypeFix</QuickFix>
  </Error>

  <Error staticGroup="FSharpErrors" name="UndefinedIndexer">
    <Parameter type="IItemIndexerExpr" name="indexerExpr"/>
    <Range>getIndexerArgListRange indexerExpr</Range>
    <Message value="Cannot apply indexing to an expression"/>
    <Behavour overlapResolvePolicy="NONE"/>
  </Error>

  <Error staticGroup="FSharpErrors" name="SuccessiveArgsShouldBeSpacedOrTupled">
    <Parameter type="IPrefixAppExpr" name="expr"/>
    <Range>expr.GetHighlightingRange()</Range>
    <Message value="Successive arguments should be separated by spaces, tupled, or parenthesized"/>
    <Behavour overlapResolvePolicy="NONE"/>
    <QuickFix>AddParensFix</QuickFix>
  </Error>

  <Warning staticGroup="FSharpErrors" name="RedundantNew">
    <Parameter type="INewExpr" name="newExpr"/>
    <Range>newExpr.NewKeyword.GetHighlightingRange()</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="NONE"/>
    <Message value="'new' keyword is redundant"/>
    <QuickFix>RemoveRedundantNewFix</QuickFix>
  </Warning>

  <Warning staticGroup="FSharpErrors" name="ConvertToUseBinding">
    <Parameter type="ILetOrUseExpr" name="letExpr"/>
    <Range>letExpr.LetOrUseToken.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <Message value="Convert to 'use' binding"/>
    <QuickFix>ConvertToUseFix</QuickFix>
  </Warning>
  
  <Error staticGroup="FSharpErrors" name="ExpectedExpressionAfterLet">
    <Parameter type="ILetOrUseExpr" name="letExpr"/>
    <Range>letExpr.LetOrUseToken.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <Message value="'{0}' is missing expression">
      <Argument>getLetTokenText letExpr.LetOrUseToken</Argument>
    </Message>
    <QuickFix>ReplaceLetWithExpressionFix</QuickFix>
  </Error>

  <Error staticGroup="FSharpErrors" name="NotAFunction">
    <Parameter type="IFSharpExpression" name="expr"/>
    <Parameter type="IPrefixAppExpr" name="prefixApp"/>
    <Message value="{0}">
      <Argument>if prefixApp.FunctionExpression == expr then "Unexpected argument" else "Unexpected arguments"</Argument>
    </Message>
    <Range>PrefixAppExprNavigator.GetByFunctionExpression(expr).ArgumentExpression.GetHighlightingRange()</Range>
    <SecondaryRanges>getAllExpressionArgs expr |> Seq.tail |> getExpressionsRanges</SecondaryRanges>
    <Behavour overlapResolvePolicy="NONE"/>
    <QuickFix>RemoveUnexpectedArgumentsFix</QuickFix>
  </Error>

  <Warning staticGroup="FSharpErrors" name="RedundantParenExpr" isSuppressedInTests="true">
    <Parameter type="IParenExpr" name="parenExpr"/>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE"/>
    <Message value="Redundant parentheses"/>
  </Warning>

  <Error staticGroup="FSharpErrors" name="FieldOrValueNotMutable">
    <Parameter type="IReferenceExpr" name="refExpr"/>
    <Message value="{0} is not mutable">
      <Argument>refExpr.Identifier.GetSourceName()</Argument>
    </Message>
    <Range>getRefExprNameRange refExpr</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <QuickFix>ToMutableFix</QuickFix>
  </Error>

  <Warning staticGroup="FSharpErrors" name="RedundantAttributeParens">
    <Parameter type="IAttribute" name="attribute"/>
    <Range>attribute.ArgExpression.GetHighlightingRange()</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE"/>
    <Message value="Parentheses are redundant if attribute has no arguments"/>
    <QuickFix>RemoveRedundantAttributeParensFix</QuickFix>
  </Warning>

  <Warning staticGroup="FSharpErrors" name="RedundantAttributeSuffix">
    <Parameter type="IAttribute" name="attribute"/>
    <Range>getAttributeSuffixRange attribute</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE"/>
    <Message value="Attribute suffix is redundant"/>
    <QuickFix>RemoveRedundantAttributeSuffixFix</QuickFix>
  </Warning>

  <Error staticGroup="FSharpErrors" name="NoImplementationGiven">
    <Parameter type="IFSharpTypeDeclaration" name="typeDecl"/>
    <Parameter type="string" name="fcsMessage"/>
    <Message value="{0}">
      <Argument>fcsMessage</Argument>
    </Message>
    <Range>typeDecl.GetNameDocumentRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <QuickFix>ToAbstractFix</QuickFix>
  </Error>

  <Error staticGroup="FSharpErrors" name="ReturnRequiresComputationExpression">
    <Parameter type="IYieldOrReturnExpr" name="yieldExpr"/>
    <Message value="`return` may only be used within computation expressions"/>
    <Range>yieldExpr.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <QuickFix>RemoveYieldFix</QuickFix>
  </Error>

  <Error staticGroup="FSharpErrors" name="YieldRequiresSeqExpression">
    <Parameter type="IYieldOrReturnExpr" name="yieldExpr"/>
    <Message value="`yield` may only be used within list, array, and sequence expressions"/>
    <Range>yieldExpr.GetHighlightingRange()</Range>
    <Behavour overlapResolvePolicy="NONE"/>
    <QuickFix>RemoveYieldFix</QuickFix>
  </Error>

  <Warning staticGroup="FSharpErrors" name="RedundantQualifier">
    <Parameter type="ITreeNode" name="treeNode"/>
    <Range>getQualifierRange treeNode</Range>
    <Behavour attributeID="DEADCODE" overlapResolvePolicy="DEADCODE"/>
    <Message value="Qualifier is redundant"/>
    <QuickFix>RemoveRedundantQualifierFix</QuickFix>
  </Warning>

</Errors>
