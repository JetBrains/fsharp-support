Language: PsiLanguageType:F#
IFSharpImplFile
  IAnonModuleDeclaration
    ITypeDeclarationGroup
      FSharpTokenType+TypeTokenElement(type:TYPE, text:type)
      Whitespace(type:WHITE_SPACE, text: ) spaces:" "
      IFSharpTypeDeclaration
        FSharpIdentifierToken(type:IDENTIFIER, text:R1)
        ITypeParameterOfTypeList
          FSharpTokenType+LessTokenElement(type:LESS, text:<)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          ITypeParameterOfTypeDeclaration
            FSharpIdentifierToken(type:SYMBOLIC_OP, text:^)
            FSharpIdentifierToken(type:IDENTIFIER, text:T1)
          FSharpTokenType+CommaTokenElement(type:COMMA, text:,)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          ITypeParameterOfTypeDeclaration
            FSharpIdentifierToken(type:SYMBOLIC_OP, text:^)
            FSharpIdentifierToken(type:IDENTIFIER, text:T2)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpTokenType+WhenTokenElement(type:WHEN, text:when)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
          INamedTypeUsage
            ITypeReferenceName
              ITypeParameterId
                FSharpIdentifierToken(type:SYMBOLIC_OP, text:^)
                FSharpIdentifierToken(type:IDENTIFIER, text:T1)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpTokenType+OrTokenElement(type:OR, text:or)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          INamedTypeUsage
            ITypeReferenceName
              ITypeParameterId
                FSharpIdentifierToken(type:SYMBOLIC_OP, text:^)
                FSharpIdentifierToken(type:IDENTIFIER, text:T2)
          FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
          FSharpTokenType+ColonTokenElement(type:COLON, text::)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
          FSharpTokenType+StaticTokenElement(type:STATIC, text:static)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpTokenType+MemberTokenElement(type:MEMBER, text:member)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
          FSharpIdentifierToken(type:PLUS, text:+)
          FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
          FSharpTokenType+ColonTokenElement(type:COLON, text::)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          IFunctionTypeUsage
            ITupleTypeUsage
              INamedTypeUsage
                ITypeReferenceName
                  ITypeParameterId
                    FSharpIdentifierToken(type:SYMBOLIC_OP, text:^)
                    FSharpIdentifierToken(type:IDENTIFIER, text:T1)
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              FSharpTokenType+StarTokenElement(type:STAR, text:*)
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              INamedTypeUsage
                ITypeReferenceName
                  ITypeParameterId
                    FSharpIdentifierToken(type:SYMBOLIC_OP, text:^)
                    FSharpIdentifierToken(type:IDENTIFIER, text:T2)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            FSharpTokenType+RarrowTokenElement(type:RARROW, text:->)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            INamedTypeUsage
              ITypeReferenceName
                ITypeParameterId
                  FSharpIdentifierToken(type:SYMBOLIC_OP, text:^)
                  FSharpIdentifierToken(type:IDENTIFIER, text:T1)
          FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
          FSharpTokenType+GreaterTokenElement(type:GREATER, text:>)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
        NewLine(type:NEW_LINE, text:\n) spaces:"\n"
        Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
        IClassRepresentation
          FSharpTokenType+ClassTokenElement(type:CLASS, text:class)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpTokenType+EndTokenElement(type:END, text:end)
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"

