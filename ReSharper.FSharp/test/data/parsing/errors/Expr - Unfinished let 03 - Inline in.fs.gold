Language: PsiLanguageType:F#
IFSharpImplFile
  INamedModuleDeclaration
    FSharpTokenType+ModuleTokenElement(type:MODULE, text:module)
    Whitespace(type:WHITE_SPACE, text: ) spaces:" "
    FSharpIdentifierToken(type:IDENTIFIER, text:Module)
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"
    IDoStatement
      FSharpTokenType+DoTokenElement(type:DO, text:do)
      NewLine(type:NEW_LINE, text:\n) spaces:"\n"
      Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
      IChameleonExpression
        IIfThenElseExpr
          FSharpTokenType+IfTokenElement(type:IF, text:if)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          IParenExpr
            FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
            ILetOrUseExpr
              FSharpTokenType+LetTokenElement(type:LET, text:let)
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              ILocalBinding
                ILocalReferencePat
                  IExpressionReferenceName
                    FSharpIdentifierToken(type:IDENTIFIER, text:x)
                Whitespace(type:WHITE_SPACE, text: ) spaces:" "
                FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
                Whitespace(type:WHITE_SPACE, text: ) spaces:" "
                ILiteralExpr
                  FSharpToken(type:INT32, text:1)
              IFromErrorExpr
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            FSharpTokenType+InTokenElement(type:IN, text:in)
            FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpTokenType+ThenTokenElement(type:THEN, text:then)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          IUnitExpr
            FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
            FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
  NewLine(type:NEW_LINE, text:\n) spaces:"\n"

