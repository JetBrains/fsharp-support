Language: PsiLanguageType:F#
IFSharpImplFile
  IAnonModuleDeclaration
    ITypeDeclarationGroup
      FSharpTokenType+TypeTokenElement(type:TYPE, text:type)
      Whitespace(type:WHITE_SPACE, text: ) spaces:" "
      IFSharpTypeDeclaration
        FSharpIdentifierToken(type:IDENTIFIER, text:T)
        IPrimaryConstructorDeclaration
          IParametersPatternDeclaration
            IUnitPat
              FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
              FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
        NewLine(type:NEW_LINE, text:\n) spaces:"\n"
        Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
        ITypeMemberDeclarationList
          ISecondaryConstructorDeclaration
            FSharpTokenType+NewTokenElement(type:NEW, text:new)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            IParametersPatternDeclaration
              IParenPat
                FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
                ITuplePat
                  ILocalReferencePat
                    IExpressionReferenceName
                      FSharpIdentifierToken(type:IDENTIFIER, text:a)
                  FSharpTokenType+CommaTokenElement(type:COMMA, text:,)
                  Whitespace(type:WHITE_SPACE, text: ) spaces:" "
                  ILocalReferencePat
                    IExpressionReferenceName
                      FSharpIdentifierToken(type:IDENTIFIER, text:b)
                FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            IChameleonExpression
              IPrefixAppExpr
                IReferenceExpr
                  FSharpIdentifierToken(type:IDENTIFIER, text:T)
                IUnitExpr
                  FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
                  FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"

