Language: PsiLanguageType:F#
IFSharpImplFile
  IAnonModuleDeclaration
    ITypeDeclarationGroup
      FSharpTokenType+TypeTokenElement(type:TYPE, text:type)
      Whitespace(type:WHITE_SPACE, text: ) spaces:" "
      IFSharpTypeDeclaration
        FSharpIdentifierToken(type:IDENTIFIER, text:T)
        IPrimaryConstructorDeclaration
          IParametersPatternDeclaration
            IParenPat
              FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
              FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
        NewLine(type:NEW_LINE, text:\n) spaces:"\n"
        Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
        IClassRepresentation
          FSharpTokenType+ClassTokenElement(type:CLASS, text:class)
          NewLine(type:NEW_LINE, text:\n) spaces:"\n"
          Whitespace(type:WHITE_SPACE, text:        ) spaces:"        "
          ITypeMemberDeclarationList
            ILetBindingsDeclaration
              FSharpTokenType+LetTokenElement(type:LET, text:let)
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              ITopBinding
                ITopReferencePat
                  IExpressionReferenceName
                    FSharpIdentifierToken(type:IDENTIFIER, text:x)
                Whitespace(type:WHITE_SPACE, text: ) spaces:" "
                FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
                Whitespace(type:WHITE_SPACE, text: ) spaces:" "
                IChameleonExpression
                  ILiteralExpr
                    FSharpToken(type:INT32, text:1)
          NewLine(type:NEW_LINE, text:\n) spaces:"\n"
          Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
          FSharpTokenType+EndTokenElement(type:END, text:end)
        NewLine(type:NEW_LINE, text:\n) spaces:"\n"
        Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
        ITypeMemberDeclarationList
          ILetBindingsDeclaration
            FSharpTokenType+LetTokenElement(type:LET, text:let)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            ITopBinding
              ITopReferencePat
                IExpressionReferenceName
                  FSharpIdentifierToken(type:IDENTIFIER, text:y)
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              IChameleonExpression
                ILiteralExpr
                  FSharpToken(type:INT32, text:1)
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"

