Language: PsiLanguageType:F#
IFSharpImplFile
  IAnonModuleDeclaration
    IDoStatement
      FSharpTokenType+DoTokenElement(type:DO, text:do)
      NewLine(type:NEW_LINE, text:\n) spaces:"\n"
      Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
      IChameleonExpression
        ISequentialExpr
          IUnitExpr
            FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
            FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
          NewLine(type:NEW_LINE, text:\n) spaces:"\n"
          Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
          ILetOrUseExpr
            FSharpTokenType+LetTokenElement(type:LET, text:let)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            ILocalBinding
              ILocalReferencePat
                IExpressionReferenceName
                  FSharpIdentifierToken(type:IDENTIFIER, text:x)
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              ILiteralExpr
                FSharpToken(type:INT32, text:123)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            FSharpTokenType+InTokenElement(type:IN, text:in)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            ISequentialExpr
              IUnitExpr
                FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
                FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
              NewLine(type:NEW_LINE, text:\n) spaces:"\n"
              Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
              IUnitExpr
                FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
                FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"

