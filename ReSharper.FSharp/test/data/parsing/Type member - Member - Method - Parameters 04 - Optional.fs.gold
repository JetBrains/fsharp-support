Language: PsiLanguageType:F#
IFSharpImplFile
  IAnonModuleDeclaration
    ITypeDeclarationGroup
      FSharpTokenType+TypeTokenElement(type:TYPE, text:type)
      Whitespace(type:WHITE_SPACE, text: ) spaces:" "
      IFSharpTypeDeclaration
        FSharpIdentifierToken(type:IDENTIFIER, text:T)
        Whitespace(type:WHITE_SPACE, text: ) spaces:" "
        FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
        NewLine(type:NEW_LINE, text:\n) spaces:"\n"
        Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
        IMemberDeclaration
          FSharpTokenType+StaticTokenElement(type:STATIC, text:static)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpTokenType+MemberTokenElement(type:MEMBER, text:member)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpIdentifierToken(type:IDENTIFIER, text:M)
          IParametersPatternDeclaration
            IParenPat
              FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
              ITuplePat
                IOptionalValPat
                  FSharpTokenType+QmarkTokenElement(type:QMARK, text:?)
                  ILocalReferencePat
                    IExpressionReferenceName
                      FSharpIdentifierToken(type:IDENTIFIER, text:a)
                FSharpTokenType+CommaTokenElement(type:COMMA, text:,)
                Whitespace(type:WHITE_SPACE, text: ) spaces:" "
                IOptionalValPat
                  FSharpTokenType+QmarkTokenElement(type:QMARK, text:?)
                  ILocalReferencePat
                    IExpressionReferenceName
                      FSharpIdentifierToken(type:IDENTIFIER, text:b)
              FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          IChameleonExpression
            IUnitExpr
              FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
              FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"

