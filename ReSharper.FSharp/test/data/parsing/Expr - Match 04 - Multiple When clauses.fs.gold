Language: PsiLanguageType:F#
IFSharpImplFile
  IAnonModuleDeclaration
    IDoStatement
      IChameleonExpression
        IMatchExpr
          FSharpTokenType+MatchTokenElement(type:MATCH, text:match)
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          IUnitExpr
            FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
            FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
          Whitespace(type:WHITE_SPACE, text: ) spaces:" "
          FSharpTokenType+WithTokenElement(type:WITH, text:with)
          NewLine(type:NEW_LINE, text:\n) spaces:"\n"
          IMatchClause
            FSharpTokenType+BarTokenElement(type:BAR, text:|)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            ILocalReferencePat
              IExpressionReferenceName
                FSharpIdentifierToken(type:IDENTIFIER, text:x)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            IWhenExprClause
              FSharpTokenType+WhenTokenElement(type:WHEN, text:when)
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              ILiteralExpr
                FSharpTokenType+TrueTokenElement(type:TRUE, text:true)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            FSharpTokenType+RarrowTokenElement(type:RARROW, text:->)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            IUnitExpr
              FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
              FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
          NewLine(type:NEW_LINE, text:\n) spaces:"\n"
          IMatchClause
            FSharpTokenType+BarTokenElement(type:BAR, text:|)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            ILocalReferencePat
              IExpressionReferenceName
                FSharpIdentifierToken(type:IDENTIFIER, text:x)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            IWhenExprClause
              FSharpTokenType+WhenTokenElement(type:WHEN, text:when)
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              IBinaryAppExpr
                ILiteralExpr
                  FSharpToken(type:INT32, text:5)
                Whitespace(type:WHITE_SPACE, text: ) spaces:" "
                IReferenceExpr
                  FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
                Whitespace(type:WHITE_SPACE, text: ) spaces:" "
                ILiteralExpr
                  FSharpToken(type:INT32, text:5)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            FSharpTokenType+RarrowTokenElement(type:RARROW, text:->)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            IUnitExpr
              FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
              FSharpTokenType+RparenTokenElement(type:RPAREN, text:))

