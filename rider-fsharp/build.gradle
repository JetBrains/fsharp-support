plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.2.30'
    id "org.jetbrains.intellij" version "0.3.1"
}

group 'com.jetbrains'

sourceCompatibility = 1.8
targetCompatibility = 1.8

intellij {
    type 'RD'

    // Download a version of Rider to compile and run with. Either set `version` to
    // 'LATEST-TRUNK-SNAPSHOT' or 'LATEST-EAP-SNAPSHOT' or a known version.
    // This will download from www.jetbrains.com/intellij-repository/snapshots or
    // www.jetbrains.com/intellij-repository/releases, respectively.
    // Note that there's no guarantee that these are kept up to date
    // version = 'LATEST-TRUNK-SNAPSHOT'
    // If the build isn't available in intellij-repository, use an installed version via `localPath`
    // localPath = '/Users/matt/Library/Application Support/JetBrains/Toolbox/apps/Rider/ch-1/171.4089.265/Rider EAP.app/Contents'
    // localPath = "C:\\Users\\Ivan.Shakhov\\AppData\\Local\\JetBrains\\Toolbox\\apps\\Rider\\ch-0\\171.4456.459"
    // localPath = "C:\\Users\\ivan.pashchenko\\AppData\\Local\\JetBrains\\Toolbox\\apps\\Rider\\ch-0\\dev"
    // localPath 'build/riderRD-173-SNAPSHOT'

    def dir = file('build/rider')
    if (dir.exists()) {
        logger.lifecycle("*** Using Rider SDK from local path " + dir.absolutePath)
        localPath = dir.absolutePath
    } else {
        logger.lifecycle("*** Using Rider SDK from intellij-snapshots repository")
        version = '2018.1-SNAPSHOT' // Trunk until we have release
    }

    downloadSources false
    updateSinceUntilBuild false

    // Workaround for https://youtrack.jetbrains.com/issue/IDEA-179607
    plugins 'rider-plugins-appender'
}

if (!ext.has("BuildConfiguration"))
    ext.BuildConfiguration = "Debug"

def backendDir = '../ReSharper.FSharp'
def libDllFiles = [
        "FSharp.Common/bin/$BuildConfiguration/net451/FSharp.Core.dll",
        "FSharp.Common/bin/$BuildConfiguration/net451/FSharp.Compiler.Service.dll", // todo: add pdb after next repack
        "FSharp.Psi.Features/bin/$BuildConfiguration/net451/Fantomas.dll"
]

def pluginDllFiles = [
        "FSharp.ProjectModelBase/bin/$BuildConfiguration/net451/JetBrains.ReSharper.Plugins.FSharp.ProjectModelBase",
        "FSharp.Common/bin/$BuildConfiguration/net451/JetBrains.ReSharper.Plugins.FSharp.Common",
        "FSharp.Psi/bin/$BuildConfiguration/net451/JetBrains.ReSharper.Plugins.FSharp.Psi",
        "FSharp.Psi.Features/bin/$BuildConfiguration/net451/JetBrains.ReSharper.Plugins.FSharp.Psi.Features",
        "Daemon.FSharp/bin/$BuildConfiguration/net451/JetBrains.ReSharper.Plugins.FSharp.Daemon.Cs",
        "Services.FSharp/bin/$BuildConfiguration/net451/JetBrains.ReSharper.Plugins.FSharp.Services.Cs"
]

def files =
        libDllFiles +
        pluginDllFiles.collect { it + '.dll' } +
        pluginDllFiles.collect { it + '.pdb' }

prepareSandbox {
    files.forEach {
        def file = file("$backendDir/src/$it")
        if (!file.exists()) throw new RuntimeException("File $file does not exist")

        logger.warn("prepareSandbox: " +
                file.toString() + " -> " +
                "$destinationDir/$intellij.pluginName/dotnet")
        from(file, { into "$intellij.pluginName/dotnet" })
    }
    into("$intellij.pluginName/projectTemplates") {
        from 'projectTemplates'
    }
}

prepareTestingSandbox {
    def hostDllName = "JetBrains.ReSharper.Plugins.FSharp.Tests.Host"
    def hostDllPath = "$backendDir/test/src/FSharp.Tests.Host/bin/$BuildConfiguration/net451/$hostDllName"
    files = files.collect { "$backendDir/src/$it" } + [hostDllPath + ".dll", hostDllPath + ".pdb"]

    files.forEach {
        def file = file(it)
        if (!file.exists()) throw new RuntimeException("File $file does not exist")

        logger.warn("prepareTestingSandbox: " +
                file.toString() + " -> " +
                "$destinationDir/$intellij.pluginName/dotnet")
        from(file, { into "$intellij.pluginName/dotnet" })
    }
    into("$intellij.pluginName/projectTemplates") {
        from 'projectTemplates'
    }
}

wrapper {
    gradleVersion '4.6'
    distributionType 'ALL'
}

repositories {
    mavenCentral()
}

test {
    useTestNG() {}
    testLogging {
        showStandardStreams = true
        exceptionFormat "full"
    }
    def rerunSuccessfulTests = false
    outputs.upToDateWhen { !rerunSuccessfulTests }
}
